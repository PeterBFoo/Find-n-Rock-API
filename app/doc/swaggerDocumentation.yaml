openapi: 3.0.0
info:
  version: 1.0.0
  title: Find 'n Rock API
  description: Find 'n Rock API documentation
  license:
    name: MIT
servers:
  - url: https://findnrock.tech/api/ # Production
  - url: http://localhost:3000/ #Â Development
paths:
  /api/auth/get/experiences/{username}:
    get:
      summary: Get all the working experiences of the user
      tags:
        - WorkExperience

      parameters:
        - name: username
          in: path
          description: Username of the user.
          required: true
          schema:
            type: string

      responses:
        "200":
          description: All the work experiences of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperience"

  /api/auth/create/experience:
    post:
      summary: Create a new working experience
      tags:
        - WorkExperience
      requestBody:
        description: Create a new working experience
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkExperience"
            example:
              description: My description
              initialDate: 06/06/2006
              endDate: 06/06/2006
              name: Name of the experience
              enterprise: Name of the enterprise
              country: Country of the enterprise
              region: Region of the enterprise
              city: City of the enterprise

      responses:
        "201":
          description: Work experience created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperience"
        "400":
          description: Could be a bad request (doesn't have all the needed params), the user doesn't exist or the user.

  /api/auth/update/experience/{id}:
    put:
      summary: Update a working experience
      tags:
        - WorkExperience
      parameters:
        - name: id
          in: path
          description: ID of the working experience
          required: true
          schema:
            type: string
      requestBody:
        description: Update a working experience
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WorkExperience"
            example:
              description: My description
              initialDate: 06/06/2006
              endDate: 06/06/2006
              name: Name of the experience
              enterprise: Name of the enterprise
              country: Country of the enterprise
              region: Region of the enterprise
              city: City of the enterprise

      responses:
        "200":
          description: Work experience updated successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperience"
        "304":
          description: The work experience is the same as the one in the database
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperience"

        "400":
          description: Could be a bad request (doesn't have all the needed params), the user doesn't exist or the user.

        "404":
          description: The work experience doesn't exist

  /api/auth/delete/experience/{id}:
    delete:
      summary: Delete a working experience
      tags:
        - WorkExperience
      parameters:
        - name: id
          in: path
          description: ID of the working experience
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Work experience deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WorkExperience"
        "400":
          description: Could be a bad request (doesn't have all the needed params), the user doesn't exist or the user.

        "404":
          description: The work experience doesn't exist

  /api/login:
    post:
      summary: Log in to the user account
      tags:
        - User
      requestBody:
        description: Log in to the user account
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              username: username
              password: password

      responses:
        "200":
          description: Logged successfully, returns the user and a token. Includes a cookie "auth-token" that contains the token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "401":
          description: Unauthorized, mismatch with the password, the user does not exist or user is already logged in.

  /api/logout:
    post:
      summary: Log out
      tags:
        - User
      requestBody:
        description: Log out, removes the cookie 'auth-token'
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example: {}

      responses:
        "200":
          description: Logged out successfully, removes the cookie 'auth-token'
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: If the user is not logged

  /api/register:
    post:
      summary: Creates a new user, can be an entrepreneur or a music group
      tags:
        - User
      requestBody:
        description: Creates a new user. If the user is an entrepreneur, the integrants and musicalGenres are not needed.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              username: musicGroup
              password: test
              name: My name
              email: musicGroup@test.com
              image: link-to-image
              phone: "123456789"
              address: "My address"
              country: "My country"
              integrants: 4
              musicalGenres: ["Blues", "Rock"]
              role: "group"

      responses:
        "200":
          description: User created succesfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Could be a bad request (doesn't have all the needed params), couldn't find the role, the user exists or the email is already registered.

  /api/auth/profiles:
    get:
      summary: Get all the profiles specified by the user type.
      tags:
        - User
      parameters:
        - name: type
          in: query
          description: To get all the entrepreneurs, value must be 'entrepreneur', to get all the music groups, value must be 'group'.
          required: true
          schema:
            type: string

        - name: genre
          in: query
          description: Music genre that the users must have.
          required: false
          schema:
            type: string

        - name: country
          in: query
          description: Country where users must belong.
          required: false
          schema:
            type: string

      responses:
        "200":
          description: Get all the requested profiles with that are specified in the type of user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "400":
          description: The type parameter is empty or invalid.
          content:
            application/json:
              schema:
                message: Error

        "404":
          description: The type parameter has no match with any of the available user types.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/auth/posts:
    get:
      summary: Get all the active posts, they can be filtered by country, region, city and genres. The genres are separated by commas, and all the filters are accumulative.
      tags:
        - Post
      parameters:
        - name: country
          in: query
          description: Filter posts by country
          required: false
          schema:
            type: string
        - name: region
          in: query
          description: Filter posts by region
          required: false
          schema:
            type: string
        - name: city
          in: query
          description: Filter posts by city
          required: false
          schema:
            type: string
        - name: genres
          in: query
          description: Filter posts by genres
          required: false
          schema:
            type: string
      responses:
        "200":
          description: All the active posts that acomplishes the conditions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/suscriptions/chosen:
    get:
      summary: Get the posts where user has been selected
      tags:
        - Post

      responses:
        "200":
          description: Posts where user has been selected
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/{username}:
    get:
      summary: Get all the posts of a user
      tags:
        - Post
      parameters:
        - name: username
          in: path
          description: The username of the user
          required: true
          schema:
            type: string
      responses:
        "200":
          description: All the active posts of the user
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/post/{id}:
    get:
      summary: Get a post by ID
      tags:
        - Post
      parameters:
        - name: id
          in: path
          description: The post ID
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Gets the requested post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: ID is not valid (NaN)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/create:
    post:
      summary: Creates a new post, only entrepreneurs can create posts.
      tags:
        - Post
      requestBody:
        description: Creates a new post
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
            example:
              title: Post title
              subtitle: Post subtitle
              body: Post body
              image: Post image
              genres: [Blues]
              country: Spain
              region: Balearic Islands
              city: Alcudia

      responses:
        "201":
          description: Post created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Post parameters are not valid or not all the requested are in the body
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized if user cannot create posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/edit/{postId}:
    post:
      summary: Edits an existing post, this post must be active in order to be edited
      tags:
        - Post

      parameters:
        - name: postId
          in: path
          description: Post ID
          required: true
          schema:
            type: string

      requestBody:
        description: Edits an existing post
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Post"
            example:
              title: Changed  title
              subtitle: Changed subtitle
              body: Changed body
              image: Changed image
              genres: [Blues, Rock]
              country: Denmark
              region: Balearic Islands
              city: Alcudia

      responses:
        "200":
          description: Post edited successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Post parameters are not valid or not all the necessary are in the request.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized if user cannot manage posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/delete/{postId}:
    post:
      summary: Turns to false the active attribute of the post, that makes that it will not be indexed to the other users rather than the post owner

      tags:
        - Post

      parameters:
        - name: postId
          in: path
          description: Post ID
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Post deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: ID is not valid
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized if user cannot manage posts or is not the post owner
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/suscribe/{postId}:
    post:
      summary: Suscribes to an active post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          description: Post ID
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Successfully suscribed to the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: User is already suscribed to the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized if user cannot suscribe to posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/posts/unsuscribe/{postId}:
    post:
      summary: Suscribes to an active post
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          description: Post ID
          required: true
          schema:
            type: string

      responses:
        "200":
          description: Successfully unsuscribed to the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: User is already not suscribed to the post
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "401":
          description: Unauthorized if user cannot suscribe to posts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/suscribed/posts:
    get:
      summary: Get all the active posts where the user is suscribed
      tags:
        - Post

      responses:
        "200":
          description: All the active posts where the user is suscribed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/history/posts:
    get:
      summary: Get all the posts where the user is suscribed or has been suscribed if is a music group, otherwise gets all the posts that the user has created
      tags:
        - Post

      responses:
        "200":
          description: All the active posts where the user is suscribed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

        "401":
          description: Unauthorized if role is not an entrepreneur or a music group
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/post/choose/{postId}:
    post:
      summary: Choose the candidates of the post to be elected
      tags:
        - Post
      parameters:
        - name: postId
          in: path
          description: User username
          required: false
          schema:
            type: string
      requestBody:
        description: Select the candidates
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              candidates: ["username1", "username2"]

      responses:
        "200":
          description: The suscribers have been selected, and the post now is inactive. Returns the selected candidates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"
        "400":
          description: Invalid ID or didn't send any candidates
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "401":
          description: Only the post owner can do this action
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "404":
          description: Post not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/auth/profile:
    get:
      summary: Gets the current information of the user
      tags:
        - User

      responses:
        "200":
          description: Gets the user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/auth/profile/{username}:
    get:
      summary: Gets the current information of the requested user
      tags:
        - User
      parameters:
        - name: username
          in: path
          description: User username
          required: false
          schema:
            type: string
      responses:
        "200":
          description: Gets the user information
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

  /api/auth/profile/edit:
    post:
      summary: Edits the profile of the user
      tags:
        - User
      requestBody:
        description: Edits the user information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
            example:
              password: newpassword
              name: change name
              description: chagne description
              email: newEmail@email.com
              image: new image
              address: new address
              country: new country
              phone: new phone

      responses:
        "200":
          description: User has been edited successfully, returns the user with the updated information and clears the 'auth-token' cookie
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: Email already exists or is a bad request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "404":
          description: User not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"

        "500":
          description: Unknown error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Post"

  /api/genres:
    get:
      summary: Gets all the available genres
      tags:
        - MusicGenre
      responses:
        "200":
          description: Gets all the available genres
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicGenre"

  /api/auth/genres/create:
    post:
      summary: Create a new music genre
      tags:
        - MusicGenre
      requestBody:
        description: Creates a new music genre, only can be done by the user with the admin role
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MusicGenre"
            example:
              name: Jazz

      responses:
        "201":
          description: Genre created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicGenre"
        "400":
          description: Genre already exists or is a bad request

        "403":
          description: Only the admin can do this action
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicGenre"

  /api/auth/genres/delete/{name}:
    delete:
      summary: Deletes a music genre
      tags:
        - MusicGenre
      parameters:
        - name: name
          in: path
          description: Genre to delete
          required: true
          schema:
            type: string

      responses:
        "204":
          description: Genre deleted successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicGenre"
        "400":
          description: Bad request

        "403":
          description: Only the admin can do this action
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicGenre"

        "404":
          description: Genre not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MusicGenre"

components:
  schemas:
    WorkExperience:
      type: object
      required:
        - name
        - enterprise
        - description
        - initialDate
        - endDate
        - country
        - region
        - city

      properties:
        name:
          type: string
          description: Work experience name

        enterprise:
          type: string
          description: Work experience enterprise

        description:
          type: string
          description: Work experience description

        initialDate:
          type: Date
          description: Work experience initial date

        endDate:
          type: Date
          description: Work experience end date

        country:
          type: string
          description: Work experience country

        region:
          type: string
          description: Work experience region

        city:
          type: string
          description: Work experience city

    User:
      type: object
      required:
        - username
        - password
        - name
        - description
        - email
        - image
        - country
        - role

      properties:
        username:
          type: string
          description: User's username

        password:
          type: string
          description: User's password

        name:
          type: string
          description: User's name

        description:
          type: string
          description: User's description

        email:
          type: string
          description: User's email

        phone:
          type: string
          description: User's phone

        address:
          type: string
          description: User's address

        image:
          type: string
          description: User's image

        country:
          type: string
          description: User's country

        role:
          $ref: "#/components/schemas/Role"
          type: Role
          description: User's role and permissions

        integrants:
          type: number
          description: Quantity of members that are in the group

        musicalGenres:
          $ref: "#/components/schemas/MusicGenre"
          type: MusicGenre[]
          description: User's prefered genres

    Post:
      type: object
      required:
        - title
        - subtitle
        - body
        - date
        - userId
        - genres
        - country
        - active

      properties:
        title:
          type: string
          description: Post title or name of the event.

        subtitle:
          type: string
          description: Post subtitle or short description.

        body:
          type: string
          description: Post body/description of the event.

        date:
          type: Date
          description: Date of creation of the post.

        userId:
          type: number
          description: Post owner ID

        genres:
          $ref: "#/components/schemas/MusicGenre"
          type: MusicGenre[]
          description: List of music genres that are related to the post.

        suscriptions:
          $ref: "#/components/schemas/User"
          type: User[]
          description: Suscribed users list, only the owner can see this list.

        country:
          type: string
          description: Country where the event is going to happen.

        region:
          type: string
          description: Region where the event is going to happen.

        city:
          type: string
          description: City where the event is going to happen.

        active:
          type: boolean
          description: Determines if the post is active or not. If it's not active, it won't be shown in the posts list, and only the owner can see it. This variable is determined by the API and can't be modified manually.

    Role:
      type: object
      required:
        - name
        - canManagePosts
        - canSuscribe
        - canCreateRoles

      properties:
        id:
          type: number
          description: Role ID

        name:
          type: string
          description: Role name

        canManagePosts:
          type: boolean
          description: Determines if user can create, modify or delete posts.

        canSuscribe:
          type: boolean
          description: Determines if user can suscribe or unsuscribe to posts.

        canCreateRoles:
          type: boolean
          description: Determines if user can create roles or not.

    MusicGenre:
      type: object

      required:
        - name

      properties:
        id:
          type: number
          description: Music genre ID.

        name:
          type: string
          description: Name of the music genre.
